package com.example.demo.controller;

import java.text.DecimalFormat;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.DTO.BoardDTO;
import com.example.demo.DTO.FriendListDTO;
import com.example.demo.DTO.RunDto;
import com.example.demo.entity.Board;
import com.example.demo.service.BoardService;
import com.example.demo.service.FriendListService;
import com.example.demo.service.RunService;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/")
public class RunningMateController {
	
	private RunService runService;
	private BoardService boardService;
	
	public RunningMateController(RunService runService) {
		this.runService = runService;
	}
	
	@GetMapping("/index")
	public String index(Model model) {
		List<BoardDTO> boardDtolist = boardService.getBoardList(1);
		model.addAttribute("board", boardDtolist);
		return "index";
	}

	@GetMapping("running_list")
	public String running_list(Model model, @RequestParam(value="page", defaultValue = "1") Integer pageNum) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String currentUsername = authentication.getName();
		
		List<RunDto> runDtoList = runService.getRunlist(currentUsername, pageNum);
		Integer[] pageList = runService.getPageList(pageNum,currentUsername);
		double totalRunningKm = runService.getTotalRunningKm(currentUsername);
		DecimalFormat decimalFormat = new DecimalFormat("#.##"); // 소수점 두 자리까지 표시
		String formattedTotalRunningKm = decimalFormat.format(totalRunningKm);
		long totalDaysRun = runService.getTotalDaysRun(currentUsername);
	    
//		double totalkm = runService.getTotalkm(currentUsername);
		
		model.addAttribute("runList", runDtoList);
		model.addAttribute("pageList", pageList);
//		model.addAttribute("total", totalkm);		
		model.addAttribute("formattedTotalRunningKm", formattedTotalRunningKm);
		model.addAttribute("totalDaysRun", totalDaysRun);
		
		return "running_list";
	}
	
	@GetMapping("write")
	public String write() {
		return "write";
	}
	
	@PostMapping("write")
	public String write(RunDto runDto) {
		runService.savewrite(runDto);
		return "redirect:/running_list";
	}
	
	@GetMapping("write/modify/{no}")
	public String edit(@PathVariable("no") Long idx, Model model) {
		RunDto runDto = runService.getWrite(idx);
		
		model.addAttribute("runDto", runDto);
		return "running_modify";
	}
	
	@PutMapping("/modify/{no}")	
	public String update(RunDto runDto) {
		runService.savewrite(runDto);
		return "redirect:/running_list";
	}
	
	@GetMapping("write/delete/{no}")
	public String delete(@PathVariable("no") Long idx) { 
		runService.deleteWrite(idx);
	    return "redirect:/running_list"; 
	}
	
	
	@GetMapping("/mateContent")
	public String mateContent() {
		return "mateContent";
	}	
	
}
