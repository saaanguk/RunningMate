package com.example.demo.entity;



import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.demo.dto.MemberDTO;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Builder;
import lombok.Getter;
import lombok.*;

@Entity
@Getter
@Setter
@ToString
public class Member {
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "idx")
    private Long idx;
    
    @Column(name = "username", nullable = true)
    private String username; // 로그인한 사용자의 이름
    
    @Column(name = "userId", nullable = true, unique = true)
    private String userId; // 로그인한 사용자의 이메일
    
    @Column(name = "pw", nullable = true)
    private String pw; // 로그인한 사용자의 이메일
    
    @Column(name = "addr", nullable = true)
    private String addr; // 로그인한 사용자의 주소
    
    @Column(name = "ph", nullable = true)
    private String ph; // 로그인한 사용자의 전화번호
    
    @Enumerated(EnumType.STRING)
    private Role role;
    
    @Builder
    public static Member CreateMember(MemberDTO memberDto, PasswordEncoder passwordEncoder){
    	Member member = new Member();
    	member.setUsername(memberDto.getUsername());
    	member.setUserId(memberDto.getUserId());
    	member.setPw(passwordEncoder.encode(memberDto.getPw()));
    	member.setAddr(memberDto.getAddr());
    	member.setPh(memberDto.getPh());
    	member.setRole(Role.USER); // 가입시 role은 무조건 회원으로 저장
    		return member;
}
}
