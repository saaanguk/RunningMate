package com.example.demo.controller;

import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.DTO.MateBoardDTO;
import com.example.demo.DTO.MateBoardReplyDTO;
import com.example.demo.DTO.MemberDTO;
import com.example.demo.service.MateBoardService;
import com.example.demo.service.MemberService;


@Controller
@RequestMapping("/")
public class MateBoardController {
private MateBoardService mateboardService;
private MemberService memberService;
	
	
	public MateBoardController(MateBoardService mateboardService, MemberService memberService) {
		this.memberService = memberService;
		this.mateboardService = mateboardService;
	}
	
	//메이트게시판 리스트getmapping
			@GetMapping("/mateBoard")
			public String mateBoard(Model model, @RequestParam(value="page", defaultValue = "1") Integer pageNum) {
				List<MateBoardDTO> mateboardDTO = mateboardService.getBoardlist(pageNum);
				Integer[] pageList = mateboardService.getPageList(pageNum);
				model.addAttribute("mateBoard", mateboardDTO);
				model.addAttribute("pageList", pageList);
				return "mateBoard";
			}
			
	//메이트게시판 글쓰기 getmapping
			@GetMapping("/matewrite/{username}")
			public String matewrite(Model model, @PathVariable("username") String username ) {
				MemberDTO memberDto = memberService.getMemberinfo(username);
				
				model.addAttribute("member", memberDto);
				
				return "matewrite";
			}
			
			@PostMapping("/matewrite")
			public String matewrite(MateBoardDTO mateboardDto) {
				mateboardService.mateBoardwrite(mateboardDto);
				return "redirect:/mateBoard";
			}
			
	//메이트게시판 상세보기
			@GetMapping("/mateContent/{idx}")
			public String mateContent(Model model, @PathVariable("idx") Long idx) {
				MateBoardDTO mateboardDTO = mateboardService.getMateBoardcontent(idx);
				List<MateBoardReplyDTO> mateboardReplyDTO = mateboardService.getMateBoardReply(idx);
				
				model.addAttribute("mateContent", mateboardDTO);
				model.addAttribute("mateboardreply", mateboardReplyDTO);
				
				return "mateContent";
			}
			
			//메이트게시판 수정
			@GetMapping("/matemodify/{idx}")
			public String matemodify(Model model, @PathVariable("idx") Long idx) {
				MateBoardDTO mateboardDTO = mateboardService.getMateBoardcontent(idx);
				model.addAttribute("matemodify", mateboardDTO);
				return "matemodify";
			}
			
			@PostMapping("/matemodify/{idx}")
			public String matefreemodify(MateBoardDTO mateboardDto, @PathVariable("idx") Long idx) {
				mateboardService.mateBoardwrite(mateboardDto);
				return "redirect:/mateContent/"+idx;
			}
			
			//메이트게시판 삭제
			@GetMapping("/matedelete/{idx}")
			public String matedelete(@PathVariable("idx") Long idx) {
				mateboardService.mateBoardelete(idx);
				return "redirect:/mateBoard";
			}
			
			//댓글
			@GetMapping("/mateContent/mateboardReply")
			public String mateboardReply() {
				return "mateboardReply";
			}
			
			@PostMapping("/mateContent/mateboardReply/{no}")
			public String mateboardReply(MateBoardReplyDTO mateboardReplyDTO, @PathVariable("no") Long idx) {
				mateboardService.MateBoardReply(mateboardReplyDTO);
				return "redirect:/mateContent/" + idx;
			}
			
			//댓글 삭제
			@GetMapping("mateContent/{bidx}/matereplydelete/{idx}")
			public String matereplydelete(@PathVariable("bidx") Long bidx, @PathVariable("idx") Long idx) {
				mateboardService.replyelete(idx);
				return "redirect:/mateContent/"+bidx;
			}
			
			//댓글 수정
			@GetMapping("/matereplyEdit")
			public String matereplyEdit() {
				return "matereplyEdit";
			}
			
			@PostMapping("/matereplyEdit/{no}")
			public String mateReplyedit(MateBoardReplyDTO mateboardreplyDTO, @PathVariable("no") Long bidx) {
				
				mateboardService.mateReplyedit(mateboardreplyDTO);
				return "redirect:/mateContent/" + bidx;
			}
			
			
}
