package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.DTO.FriendRequestDTO;
import com.example.demo.entity.FriendList;
import com.example.demo.entity.FriendRequest;
import com.example.demo.repository.FriendRequestRepository;

@Service
public class FriendRequestService {
	private final FriendRequestRepository friendRequestRepository;
	
	public FriendRequestService(FriendRequestRepository friendRequestRepository) {
		this.friendRequestRepository = friendRequestRepository;
	}
	
	@Transactional
	public Long request(FriendRequestDTO frDTO) {
		String username = frDTO.getUsername();
		String requestname = frDTO.getRequestname();
		Optional<FriendRequest> friendRequestDto = friendRequestRepository.findByUsernameAndRequestname(username, requestname);
		FriendRequest requestList = friendRequestDto.get();
		String wrraperUser = requestList.getUsername();
		String wrraterRequest = requestList.getRequestname();
		
		if (username.equals(wrraperUser) && requestname.equals(wrraterRequest)) {
			return null;
			
		} else {
			return friendRequestRepository.save(frDTO.toEntity()).getIdx();
		}
		
	}
	
	private static final int BLOCK_PAGE_NUM_COUNT = 5; //블럭에 존재하는 페이지 번호 수
	private static final int PAGE_POST_COUNT = 5; //한 페이지에 존재하는 게시글 수
	
	public List<FriendRequestDTO> getRequestList(String id, Integer pageNum) {
		Page<FriendRequest> page = friendRequestRepository.findByUsernameOrderByRequestnameAsc(PageRequest.of(pageNum -1, PAGE_POST_COUNT), id);
		
		List<FriendRequest> request = page.getContent();
		List<FriendRequestDTO> requestDtoList = new ArrayList<>();
		int count = 1;
		for(FriendRequest friendRequest : request) {
			FriendRequestDTO requestDTO = FriendRequestDTO.builder()
					.idx(friendRequest.getIdx())
					.location(friendRequest.getLocation())
					.requestemail(friendRequest.getRequestemail())
					.requestname(friendRequest.getRequestname())
					.useremail(friendRequest.getUseremail())
					.username(friendRequest.getUsername())
					.request_date(friendRequest.getReg_date())
					.count(count)
					.build();
			
			requestDtoList.add(requestDTO);
			
			count++;
		}
		return requestDtoList;
	}
	
	@Transactional
    public Long getBoardCount() {
   // 	String useremail = "1@naver.com";//
        return friendRequestRepository.count();
    }

    public Integer[] getPageList(Integer curPageNum) {
        Integer[] pageList = new Integer[BLOCK_PAGE_NUM_COUNT];

        // 총 게시글 갯수
        Double postsTotalCount = Double.valueOf(this.getBoardCount());
        // 총 게시글 기준으로 계산한 마지막 페이지 번호 계산 (올림으로 계산)
        Integer totalLastPageNum = (int) (Math.ceil((postsTotalCount / PAGE_POST_COUNT)));

        // 현재 페이지를 기준으로 블럭의 마지막 페이지 번호 계산
        Integer blockLastPageNum = (totalLastPageNum > curPageNum + BLOCK_PAGE_NUM_COUNT)
                ? curPageNum + BLOCK_PAGE_NUM_COUNT
                : totalLastPageNum;

        // 현재 페이지가 마지막 페이지 번호를 초과하지 않도록 보정
        if (curPageNum > totalLastPageNum) {
            curPageNum = totalLastPageNum;
        }

        // 페이지 시작 번호 조정
        int startPage = (curPageNum <= 3) ? 1 : curPageNum - 2;

        // 페이지 번호 할당
        int index = 0;
        for (int val = startPage; val <= blockLastPageNum; val++) {
            if (index >= BLOCK_PAGE_NUM_COUNT) {
                break;
            }
            pageList[index++] = val;
        }

        return pageList;
    }
	
	@Transactional
	public void deleteRequest(Long idx) {
		friendRequestRepository.deleteById(idx);	
	}

}
