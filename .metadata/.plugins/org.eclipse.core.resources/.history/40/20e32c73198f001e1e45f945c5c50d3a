package com.example.spring.config;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

	@Bean
    public BCryptPasswordEncoder passwordEncoder(){
        // 해수함수를 이용하여 비밀번호를 암호화하여 저장.
        return new BCryptPasswordEncoder();
	}
	
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        return http
                .csrf(CsrfConfigurer::disable)
                .authorizeHttpRequests((authorizeRequests) ->
                        authorizeRequests
                                .requestMatchers("/matewrite/**", "/inquire/**", "/freewrite/**", "/tourwrite/**").authenticated() //로그인한 유저만 접속가능한 링크
                                .requestMatchers("/admin_page/**").hasRole("ADMIN") //관리자만 접속가능한 링크
                                .requestMatchers("/index/**").permitAll()//모든 사용자 접근
                                .anyRequest().permitAll()
                                )
                
                .formLogin(login -> login
                        .loginPage("/login2")
                        .usernameParameter("userId")
                        .passwordParameter("pw")
                        .loginProcessingUrl("/loginProcess")
                        .defaultSuccessUrl("/index")
                        //.successHandler(new CustomLoginSuccessHandler())
                		)
                
                .logout(logout -> logout
                .logoutUrl("/logout") // 로그아웃 처리 URL, default: /logout, 원칙적으로 post 방식만 지원
                .logoutSuccessUrl("/index").permitAll() // 로그아웃 성공 후 이동페이지
                .invalidateHttpSession(true)
                .clearAuthentication(true)
                .deleteCookies("JSESSIONID", "remember-me") // 로그아웃 후 쿠키 삭제
                		)
                
                .getOrBuild();
    }
}
