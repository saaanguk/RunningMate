package com.example.demo.service;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.DTO.InquireDTO;
import com.example.demo.entity.Inquire;
import com.example.demo.repository.InquireRepository;

@Service
public class InquireService {
	
	private final InquireRepository inquireRepository;
	
	public InquireService(InquireRepository inquireRepository) {
		this.inquireRepository = inquireRepository;
	}
	
	@Transactional
	public Long saveInquire(InquireDTO inquireDTO) {
		return inquireRepository.save(inquireDTO.toEntity()).getIdx();
	}
	
	private static final int BLOCK_PAGE_NUM_COUNT = 5; //블럭에 존재하는 페이지 번호 수
	private static final int PAGE_POST_COUNT = 5; //한 페이지에 존재하는 게시글 수
	
	@Transactional
	public List<InquireDTO> getInquirelist(String currentUsername, Integer pageNum) {
		Page<Inquire> page = inquireRepository.findByUseremailOrderByIdxDesc(currentUsername, PageRequest.of(pageNum -1, PAGE_POST_COUNT));
		
		List<Inquire> inquire = page.getContent(); 
		List<InquireDTO> inquireDtoList = new ArrayList<>();
		int count = 1;
		for(Inquire inquirelist : inquire) {
			
			InquireDTO inquireDto = InquireDTO.builder()
					.idx(inquirelist.getIdx())
					.content(inquirelist.getContent())
					.title(inquirelist.getTitle())
					.useremail(inquirelist.getUseremail())
					.regdate(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(inquirelist.getReg_date()))
					.count(count)
					.build();

			inquireDtoList.add(inquireDto);
			
			count++;
		}
		return inquireDtoList;
	}

	@Transactional
    public Long getBoardCount(String myname) {
   // 	String useremail = "1@naver.com";//
        return inquireRepository.countByUseremail(myname);
    }

    public Integer[] getPageList(String myname, Integer curPageNum) {
        Integer[] pageList = new Integer[BLOCK_PAGE_NUM_COUNT];

        // 총 게시글 갯수
        Double postsTotalCount = Double.valueOf(this.getBoardCount(myname));
        // 총 게시글 기준으로 계산한 마지막 페이지 번호 계산 (올림으로 계산)
        Integer totalLastPageNum = (int) (Math.ceil((postsTotalCount / PAGE_POST_COUNT)));

        // 현재 페이지를 기준으로 블럭의 마지막 페이지 번호 계산
        Integer blockLastPageNum = (totalLastPageNum > curPageNum + BLOCK_PAGE_NUM_COUNT)
                ? curPageNum + BLOCK_PAGE_NUM_COUNT
                : totalLastPageNum;

        // 현재 페이지가 마지막 페이지 번호를 초과하지 않도록 보정
        if (curPageNum > totalLastPageNum) {
            curPageNum = totalLastPageNum;
        }

        // 페이지 시작 번호 조정
        int startPage = (curPageNum <= 3) ? 1 : curPageNum - 2;

        // 페이지 번호 할당
        int index = 0;
        for (int val = startPage; val <= blockLastPageNum; val++) {
            if (index >= BLOCK_PAGE_NUM_COUNT) {
                break;
            }
            pageList[index++] = val;
        }

        return pageList;
    }

	public void deleteInquire(Long idx) {
		inquireRepository.deleteById(idx);
		
	}
}
